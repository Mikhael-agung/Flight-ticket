// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum RoleUser {
  ADMIN
  USER
}

enum TypeSeat {
  FIRSTCLASS
  BUSINESS
  ECONOMY
}

enum StatusTicket {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        String @id @default(cuid())
  name      String
  email     String @unique
  password  String
  passport  String?
  role      RoleUser
  tickets   Tickets[]
  sessions  Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Airplane{
  id        String @id @default(cuid())
  code      String @default("ABC-123")
  name      String
  image     String
  flight    Flight[]
}

model Flight {
  id                    String @id @default(cuid())
  planeId               String  
  plane                 Airplane @relation(fields: [planeId], references: [id])
  deapartureDate        DateTime
  deapartureCity        String
  deaparturecityCode    String
  arrivalDate           DateTime
  desatinationCity      String
  desatinationCityCode  String
  price                 Int
  flightSeat            FlightSeat[]
  tickets               Tickets[]
}
model FlightSeat {
  id        String @id @default(cuid())
  flightId  String
  flight    Flight @relation(fields: [flightId], references: [id])
  seatNumber String
  isBooked   Boolean? @default(false)
  type      TypeSeat
  tickets   Tickets?
}

model Tickets {
  id       String @id @default(cuid())
  code     String @unique
  flightId String
  flight   Flight @relation(fields: [flightId], references: [id])
  customerId String
  customer User @relation(fields: [customerId], references: [id])
  seatId String @unique
  seat FlightSeat @relation(fields: [seatId], references: [id])
  bookingDate DateTime
  price BigInt
  Status StatusTicket
  tokenMidtrans String?
}
